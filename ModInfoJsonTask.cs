using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;

using Microsoft.Build.BuildEngine;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;

using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

using Vintagestory.API.Common;

namespace ModInfoTask
{
	internal class ModInfoContractResolver : DefaultContractResolver
	{
		protected override JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization)
		{
			JsonProperty property = base.CreateProperty(member, memberSerialization);

			if (property.DeclaringType == typeof(ModInfo) && property.PropertyName == "TextureSize")
			{
				property.ShouldSerialize = _ => false;
			}

			return property;
		}
	}
	public class ModInfoJsonTask : Task
	{
		[Required]
		public string Name { get; set; }
		public string ModID { get; set; }

		[Required]
		public string Version { get; set; }

		public string NetworkVersion { get; set; }

		[Required]
		public string Description { get; set; }

		public string Website { get; set; }

		[Required]
		public string Authors { get; set; }
		public string Contributors { get; set; }
		public string Side { get; set; }
		public string RequiredOnClient { get; set; }
		public string RequiredOnServer { get; set; }
		public string WorldConfig { get; set; }
		public ITaskItem[] ModDependency { get; set; }

		[Required]
		public string OutputPath { get; set; }

		public override bool Execute()
		{
			if (ModID != null)
			{
				if (!ModInfo.IsValidModID(ModID))
				{
					Log.LogError("Invalid value for ModID ({0}).", ModID);
					return false;
				}
			}
			else
			{
				ModID = ModInfo.ToModID(Name);
			}

			EnumAppSide side = EnumAppSide.Universal;
			if (Side != null && !Enum.TryParse(Side, out side))
			{
				Log.LogError("Invalid value for Side ({0}). Possible values: {1}", Utilities.Escape(Side), string.Join(", ", Enum.GetNames(typeof(EnumAppSide))));
				return false;
			}

			ModInfo modInfo = new ModInfo(
				EnumModType.Code,
				Name,
				ModID,
				Version,
				Description,
				ItemGroupToEnumerable(Authors),
				Contributors != null ? ItemGroupToEnumerable(Contributors) : null,
				Website,
				side,
				RequiredOnClient != null ? Convert.ToBoolean(RequiredOnClient) : true,
				RequiredOnServer != null ? Convert.ToBoolean(RequiredOnServer) : true,
				ModDependency != null ? ModDependency.Select(s => new ModDependency(s.ItemSpec, s.GetMetadata("Version"))) : null
				);

			JsonSerializer serializer = JsonSerializer.Create(new JsonSerializerSettings()
			{
				Formatting = Formatting.Indented,
				NullValueHandling = NullValueHandling.Ignore,
				ContractResolver = new ModInfoContractResolver()
			});

			Directory.CreateDirectory(OutputPath);
			using (StreamWriter writer = new StreamWriter(Path.Combine(OutputPath, "modinfo.json")))
			{
				using (JsonTextWriter jsonWriter = new JsonTextWriter(writer))
				{
					jsonWriter.WriteComment("Automatically generated by ModInfoJsonTask");
					jsonWriter.WriteWhitespace("\n");
					serializer.Serialize(jsonWriter, modInfo);
				}
			}

			return !Log.HasLoggedErrors;
		}

		private IEnumerable<string> ItemGroupToEnumerable(string itemGroup)
		{
			return itemGroup.Split(';').Select(a => Utilities.Escape(a));
		}
	}
}
